2021-03-15)
--프로시저 연습문제1
CREATE TABLE PROCTEST(
    PROC_SEQ NUMBER,
    PROC_CONTENT VARCHAR2(30),
    CONSTRAINT PK_PROCTEST PRIMARY KEY(PROC_SEQ)

);

CREATE SEQUENCE SEQPROC1
START WITH 1
INCREMENT BY 1;

--(1-1) 프로시저 PROC_TEST1을 생성.
--실행하면 PROCTEST 테이블에
--1, '개똥이', 데이터가 추가되도록 처리
CREATE OR REPLACE PROCEDURE PROC_TEST1
IS
BEGIN 
    INSERT INTO PROCTEST(PROC_SEQ, PROC_CONTENT)
    VALUES (SEQPROC1.NEXTVAL, '예진이');
    
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('예외발생 : '||SQLERRM);
END;
/
--프로시저 실행(EXECUTE/EXEC)
EXECUTE PROC_TEST1;
SELECT * FROM PROCTEST;
/
--1-2 프로시저 PROC TEST2을 생성
-- 실행하면 PROCTEST 테이블의 마지막 데이터를 삭제,
-- 삭제할 데이터가 없을 경우
-- "삭제할 데이터가 없습니다" 라는 에러처리
SET SERVEROUTPUT ON;
/
CREATE OR REPLACE PROCEDURE PROC_TEST2
IS 
    DEL_ERROR EXCEPTION;
    V_SEQ NUMBER;
    
BEGIN
    DELETE 
    FROM PROCTEST 
    WHERE PROC_SEQ = (SELECT MAX(PROC_SEQ) FROM PROCTEST);
    
    --PL/SQL에서 SELECT 가 사용되면 INTO도 무조건 사용되어야 함
    SELECT COUNT(*) INTO V_SEQ FROM PROCTEST;
    
    IF V_SEQ < 1 THEN
        --시스템 오류가 아닌 개발자의 조건으로 오류를 발생
        RAISE DEL_ERROR;
    END IF;
    
    EXCEPTION
        WHEN DEL_ERROR THEN
            DBMS_OUTPUT.PUT_LINE('삭제할 데이터가 없습니다.');
END;
/
EXECUTE PROC_TEST2;
SELECT * FROM PROCTEST;
/
--1-3 회원 ID를 매개변수(parameter)로 하여 해당 회원의 마일리지를 100점 추가하는 PROCEDURE 생성하기 (PROC_TEST3)
-- 회원 아이디 (MEM_ID) 및 점수를 입력받아 마일리지 점수(MEM_MILEAGE)를
-- 업데이트 하는 프로시저(UP_MEMBER_UPDATE)를 생성하기
-- EXECUTE를 통해 김은대(a001)회원의 마일리지 값을
-- 100씩 추가하여 5회에 걸쳐 500으로 올리기.
SELECT MEM_ID, MEM_MILEAGE FROM MEMBER
WHERE MEM_ID = 'a001';

/
CREATE OR REPLACE PROCEDURE PROC_TEST3(P_ID IN VARCHAR2)
IS
    UP_ERR EXCEPTION;
    M_CNT NUMBER;
BEGIN    
    UPDATE MEMBER SET MEM_MILEAGE = MEM_MILEAGE + 100 WHERE MEM_ID = P_ID;
    SELECT COUNT(*) INTO M_CNT FROM MEMBER WHERE MEM_ID=P_ID;
    IF M_CNT < 1 THEN
        RAISE UP_ERR;
    END IF;
    EXCEPTION
        WHEN UP_ERR THEN
            DBMS_OUTPUT.PUT_LINE('해당 아이디가 존재하지 않습니다.');
END;
/
EXECUTE PROC_TEST3('a001');
SELECT MEM_ID, MEM_MILEAGE FROM MEMBER
WHERE MEM_ID = 'a001';

SELECT COUNT(*) FROM MEMBER WHERE MEM_ID='a001'
/

--회원아이디를 입력받아 이름과 취미를 OUT 매개변수로 처리
CREATE OR REPLACE PROCEDURE USP_MEMBERID
    ( P_MEM_ID IN MEMBER.MEM_ID%TYPE,
      P_MEM_NAME OUT MEMBER.MEM_NAME%TYPE,
      P_MEM_LIKE OUT MEMBER.MEM_LIKE%TYPE)
IS 
BEGIN
    SELECT MEM_NAME, MEM_LIKE
        INTO P_MEM_NAME, P_MEM_LIKE
    FROM MEMBER
    WHERE MEM_ID = P_MEM_ID;
END;

/
--실행
VAR MEM_NAME VARCHAR2(20)
VAR MEM_LIKE VARCHAR2(20)
EXECUTE USP_MEMBERID('a001', :MEM_NAME, :MEM_LIKE);
PRINT MEM_NAME
PRINT MEM_LIKE
/


--상품코드와 월을 입력하면 해당 월에 대한 해당 상품의 입고, 출고를 처리해 화면에 출력하시오
--프로시저명 : USP_PROD_INFO, 월 입력형식은 'YYYYMM'이라 가정, 입고 및 출고는 OUT 매개변수로 처리.)
--컬럼구성 : PROD_ID, EXTRACT(MONTH FROM BUY_DATE), SUM(BUY_QTY), SUM(CART_QTY)
--ALIAS : 상품코드, 월, 입고수량합계, 출고수량합계

--HAVING EXTRACT(MONTH FROM BUY_DATE)>1 
--SELECT절에 쓰인것은 어느것이든 HAVING절에 사용가능하다

      
 
CREATE OR REPLACE VIEW VW_GET_QTY
AS
SELECT T.PROD_ID
     , T.BUY_CART_DATE
     , MAX(BUY_QTY) AS BUY_QTY
     , MAX(CART_QTY) AS CART_QTY
FROM 
(  
    SELECT PROD_ID,
           TO_CHAR(BUY_DATE,'YYYYMM') BUY_CART_DATE,
           SUM(BUY_QTY) BUY_QTY,
           NULL CART_QTY
        FROM PROD,BUYPROD
    WHERE PROD_ID = BUY_PROD
    GROUP BY PROD_ID, TO_CHAR(BUY_DATE,'YYYYMM')
    UNION ALL 
    SELECT PROD_ID,
           SUBSTR(CART_NO,1,6) CART_NO,
           NULL,
           SUM(CART_QTY) CART_QTY
        FROM PROD, CART
    WHERE PROD_ID = CART_PROD
    GROUP BY PROD_ID,SUBSTR(CART_NO,1,6)
) T    --INLINE VIEW
GROUP BY T.PROD_ID,T.BUY_CART_DATE
ORDER BY 1;
/
SELECT *
FROM   VW_GET_QTY
WHERE PROD_ID = 'P101000001'
AND   BUY_CART_DATE = '200504';

/
CREATE OR REPLACE PROCEDURE USP_PROD_INFO
        (P_ID VARCHAR2, P_DATE IN VARCHAR2,
         V_BUY_QTY OUT NUMBER, V_CART_QTY OUT NUMBER)
IS
BEGIN
    SELECT BUY_QTY, CART_QTY INTO V_BUY_QTY, V_CART_QTY
    FROM   VW_GET_QTY
    WHERE  PROD_ID = P_ID
    AND    BUY_CART_DATE = P_DATE;
END;
/

VAR V_BUY_QTY NUMBER
VAR V_CART_QTY NUMBER
execute USP_PROD_INFO('P101000001','200504', :V_BUY_QTY, :V_CART_QTY)
PRINT V_BUY_QTY
PRINT V_CART_QTY;